import tkinter as tk
from tkinter import messagebox
import sqlite3
from tkinter import ttk #additional features such as TREE
                        #VIEW WINDOW

class PharmacyManagementSystems:
    def __init__(self):
        self.window =  tk.Tk()
        self.window.title("Pharm App")
        self.medicines = [] #array of medicines that will be appended
        #when added to the database
        self.name_label = tk.Label(self.window,text="Med Name")
        self.name_label.grid(row=0, column=0, padx=10, pady=10)
        
        self.name_entry = tk.Entry(self.window)
        self.name_entry.grid(row=0, column = 2,padx=10, pady=10)

        self.quantity_label = tk.Label(self.window,text="Quantity")
        self.quantity_label.grid(row=1, column=1, padx=10, pady=10)
        
        self.quantity_entry = tk.Entry(self.window)
        self.quantity_entry.grid(row=1, column = 2,padx=10, pady=10)

        #DML Statements: Data Manupulation Language
        #Select, Insert, Update, Delete

        #DDL Statements: Changes the structure of an existing
        #Database or Table, Examples: Alter, Drop, Rename

        #DCL Statements: Data Control Language, Security
        #features in a database or table.
        #Example: password encryptions, etc.

        self.add_button = tk.Button(self.window, text="ADD",
                                    command=self.add_medicine)
        self.add_button.grid(row=2, column=0, padx=10, pady=10)

        #self.update_button = tk.Button(self.window, text="UPDATE",
                                    #command=self.update_medicine)
        #self.update_button.grid(row=3, column=0, padx=10, pady=10)

        #self.delete_button = tk.Button(self.window, text="DELETE",
                                    #command=self.update_medicine)
        #self.delete_button.grid(row=4, column=0, padx=10, pady=10)


        #self.display_button = tk.Button(self.window, text="DISPLAY",
                                    #command=self.display_medicine)
        #self.display_button.grid(row=5, column=0, padx=10, pady=10)

        self.treeview = ttk.Treeview(self.window, columns=("Name","Quantity"))
        self.treeview.grid(row=6, column = 0,padx=10, pady=10)
        self.treeview.heading("Name", text = "Medicine Name")
        self.treeview.heading("Quantity", text = "QTY")

        self.conn = sqlite3.connect("C:\\Users\\techi\\source\\repos\\PythonApplication3\\PythonApplication3\\Cust.db")
        self.cursor = self.conn.cursor()

    def add_medicine(self):
            #enter the name of the medicine,
            #.get will contain that medicine
            name = self.name_entry.get() 
            quantity = self.quantity_entry.get()

            if name and quantity:
                self.medicines.append((name, quantity))
                messagebox.showinfo("Success","added the MEDS")
                self.name_entry.delete (0, tk.END)
                self.quantity_entry.delete (0, tk.END)

                self.save_medicine_to_database(name, quantity)
                self.display_medicines()

            else:
                messagebox.showerror("error", "enter both fields")

    def save_medicine_to_database(self, name, quantity):
            try:
                self.cursor.execute("insert into medicines(name, quantity) values (?,?)"
                                    ,(name, quantity))

                self.conn.commit()

            except sqlite3.Error as e:
                 messagebox.showerror("Error", "fDatabase Error: {e}")

    def run (self):
        self.window.geometry("800x400")
        self.window.mainloop()


pharmacy_system = PharmacyManagementSystems()
pharmacy_system.run()










